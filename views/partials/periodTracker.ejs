<div class="custom-card w-100">
    <div class="custom-card-header">Period Tracker</div>
    <div class="w-100 mt-3">
        <button type="button" onclick="startPeriod()" class="btn btn-success">Set new start period</button>
        <button type="button" onclick="clearPeriod()" class="btn btn-danger">Clear Period History and Data</button>
        <div id="alertDiv" class="alert alert-success" role="alert" style="visibility: hidden;">
            Choose a date in the calendar to record your start period!
        </div>
        <h5>Current Start Period: <span class="h4" id="period-start-date">No ongoing period</span></h5>
        <h5>Predicted Next Period: <span class="h4" id="period-end-date">No ongoing period</span></h5>
    </div>
    <div class="text-center w-100 py-5" style="display: flex; flex-direction: row; justify-content: center;">
        <button class="btn btn-primary" type="button" onclick="prevMonth()"><</button>
        <h4 id="month-name" class="mx-4">Month Year</span></h4>
        <button class="btn btn-primary" type="button" onclick="nextMonth()">></button>
    </div>
    <div class="table-responsive-md">
        <table class="table table-hover" id="calendar">
        </table>
    </div>
</div>

<style>
    /* customize the first day of the month */
    #calendar td:first-child {
    color: red;
    }

    /* customize the last day of the month */
    #calendar td:last-child {
    color: blue;
    }

    /* customize specific days */
    #calendar td[data-date="2023-04-15"] {
        background-color: yellow;
    }

    #calendar th {
        text-align: center;
    }

    #calendar td {
        border: 1px solid black;
        text-align: center;
        font-size: larger;
    }

    #calendar td:hover {
        background-color: rgb(192, 192, 192);
    }

    #calendar {
        width: 100%;
        height: 500px;
    }

    .current-day {
        background-color: rgb(7, 72, 170);
        font-size: x-large;
        color: #fff;
    }
</style>

<% if (period) { %>
    <% if (period.phases) { %>
        <script>
            var menstrual = Number('<%= period.phases.menstrual %>')
            var follicular = Number('<%= period.phases.follicular %>')
            var ovulatory = Number('<%= period.phases.ovulatory %>')
            var luteal = Number('<%= period.phases.luteal %>')   
        </script>
    <% } else {%>
        <script>
            var menstrual = 0
            var follicular = 0
            var ovulatory = 0
            var luteal = 0
        </script>
    <% } %>
    <script>
        var months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
        var startDate = new Date('<%= (period.startDate == null ? "" : period.startDate) %>')
        var endDate = new Date('<%= (period.endDate == null ? "" : period.endDate) %>')
        var currentDate = new Date('<%= ((period.startDate == null) ? 0 : period.startDate) %>')

        var menstrualDates = []
        var follicularDates = []
        var ovulatoryDates = []
        var lutealDates = []
        
        document.getElementById('period-start-date').innerText = months[startDate.getMonth()] + ' ' + startDate.getDate() + ', ' + startDate.getFullYear()
        document.getElementById('period-end-date').innerText = months[endDate.getMonth()] + ' ' + endDate.getDate() + ', ' + endDate.getFullYear()

        for(var i = 1; i <= menstrual; i++){
            var newDate = new Date(currentDate.toISOString())
            currentDate.setDate(currentDate.getDate() + 1)
            var idDate = months[newDate.getMonth()] + ' ' + newDate.getDate() + ', ' + newDate.getFullYear()
            menstrualDates.push(idDate)
        }
        for(var i = 1; i <= follicular; i++){
            var newDate = new Date(currentDate.toISOString())
            currentDate.setDate(currentDate.getDate() + 1)
            var idDate = months[newDate.getMonth()] + ' ' + newDate.getDate() + ', ' + newDate.getFullYear()
            follicularDates.push(idDate)
        }
        for(var i = 1; i <= ovulatory; i++){
            var newDate = new Date(currentDate.toISOString())
            currentDate.setDate(currentDate.getDate() + 1)
            var idDate = months[newDate.getMonth()] + ' ' + newDate.getDate() + ', ' + newDate.getFullYear()
            ovulatoryDates.push(idDate)
        }
        for(var i = 1; i <= luteal; i++){
            var newDate = new Date(currentDate.toISOString())
            currentDate.setDate(currentDate.getDate() + 1)
            var idDate = months[newDate.getMonth()] + ' ' + newDate.getDate() + ', ' + newDate.getFullYear()
            lutealDates.push(idDate)
        }
        
        async function displayDates(){
            var phases = [menstrualDates, follicularDates, ovulatoryDates, lutealDates]
            var phaseColors = ['#e82e7f', '#e82ee2', '#c02ee8', '#752ee8']
            var titles = ['Menstrual Phase', 'Follicular Phase', 'Ovulatory Phase', 'Luteal Phase']
            for(var i = 0; i < phases.length; i++){
                for(var j = 0; j < phases[i].length; j++){
                    var cell = document.getElementById(phases[i][j])
                    if(cell == null)
                        continue
                    
                    cell.innerHTML += `<br><p style="font-size: small">${titles[i]}</p>`
                    cell.style.color = '#fff'
                    cell.style.backgroundColor = phaseColors[i]
                    cell.title = titles[i]
                }
            }
        }

    </script>
<% } %>
<script>
    var periodStartDate = new Date('<%= (period == null) ? null : period.startDate %>')
    var periodEndDate = new Date('<%= (period == null) ? null : period.endDate %>')
    var isStart = false
    var date = new Date();
    var year = date.getFullYear();
    var month = date.getMonth();
    var currentDay = date.getDay()
    var months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]

    async function processData(){
        const table = document.getElementById('calendar');
        var monthLabel = document.getElementById('month-name')

        monthLabel.innerText = months[month] + ' ' + year
        table.innerHTML = `
            <tr>
                <th>Sun</th>
                <th>Mon</th>
                <th>Tue</th>
                <th>Wed</th>
                <th>Thu</th>
                <th>Fri</th>
                <th>Sat</th>
            </tr>
        `
        var limit = hasSixWeeks(year, month) ? 6 : 5
        for(var i = 1; i <= limit; i++){
            table.innerHTML += `
                <tr>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                </tr>
            `
        }
        const firstDay = new Date(year, month, 1);
        const lastDay = new Date(year, month + 1, 0);

        let day = 1;
        for (let i = 1; i < table.rows.length; i++) {
            for (let j = 0; j < table.rows[i].cells.length; j++) {
                const cell = table.rows[i].cells[j];
                if (i === 1 && j < firstDay.getDay()) {
                // empty cell before the first day of the month
                    continue;
                }
                if (day > lastDay.getDate()) {
                // empty cell after the last day of the month
                    continue;
                }
                cell.innerText = day;
                cell.id = months[month] + ' ' + day + ', ' + year
                day++;
            }
        }
        updateCellEvents()
    }

    async function nextMonth(){
        if(month == 11){
            month = 0
            year = year + 1
        }else{
            month = month + 1
        }
        processData()
    }

    async function prevMonth(){
        if(month == 0){
            month = 11
            year = year - 1
        }else{
            month = month - 1
        }
        processData()
    }

    function hasSixWeeks(year, month) {
        const firstDayOfMonth = new Date(year, month, 1);
        const firstDayOfWeek = firstDayOfMonth.getDay();
        const lastDayOfMonth = new Date(year, month + 1, 0);
        const numDaysInMonth = lastDayOfMonth.getDate();
        const numWeeksInMonth = Math.ceil((numDaysInMonth + firstDayOfWeek) / 7);
        return numWeeksInMonth === 6;
    }

    processData()

    function updateCellEvents(){
        const cells = document.querySelectorAll('#calendar td');
        cells.forEach(cell => {
            cell.addEventListener('click', () => {
                var display = document.getElementById('month-name').innerText
                var day = cell.innerText
                var selectedDate = new Date(cell.id)
                if(selectedDate == 'Invalid Date'){
                    alert('Error on picking date!')
                    return
                }

                if(day == '')
                    return

                if(isStart){
                    isStart = false
                    $.post('/save-startperiod', {
                        startDate: selectedDate.toISOString()
                    }).done(() => {
                        location.reload()
                    })
                }else{
                    console.log('not right')
                }
            });
        });
        if(periodStartDate != 'Invalid Date')
            displayDates()
    }

    function showAlert(type){
        var alertDiv = document.getElementById('alertDiv')
        alertDiv.style.visibility = ''
        alertDiv.innerHTML = 'Choose a date in the calendar to record your <strong>' + type + '</strong> of period'
    }

    function hideAlert(type){
        var alertDiv = document.getElementById('alertDiv')
        alertDiv.style.visibility = 'hidden'
        alertDiv.innerHTML = 'Choose a date in the calendar to record your <strong>' + type + '</strong> of period'
    }

    async function startPeriod(){
        if(!isStart){
            showAlert("start")
            isStart = true
        }else{
            hideAlert()
            isStart = false
        }
    }

    function clearPeriod(){
        $.post('/clear-period').done(() =>{
            location.reload()
        })
    }
    
</script>